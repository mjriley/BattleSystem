// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using NUnit.Framework;

namespace Tests
{
	[TestFixture]
	public class AbilityTests
	{
		[Test]
		public void SafeExecuteWithNoTargets()
		{
			Character c = new Character(70);
			
			Ability ability = new Ability("Test Ability", "Normal", 20, 20, c);
			
			Character[] targets = new Character[] {};
			
			ability.Execute(targets);
			
			// No assert necessary to check that an exception is not thrown
		}
		
		[Test]
		public void SingleTargetDamage()
		{
			Character c = new Character(70);
			
			Ability ability = new Ability("Test Ability", "Normal", 20, 20, c);
			
			Character target = new Character(50);
			Character[] targets = new Character[] {target};
			
			ability.Execute(targets);
			
			Assert.AreEqual(30, target.CurrentHP);
		}
		
		[Test]
		public void AbilityDeductsUsage()
		{
			Character c = new Character(70);
			
			Ability ability = new Ability("Test Ability", "Normal", 20, 20, c);
			
			Character target = new Character(50);
			Character[] targets = new Character[] {target};
			
			ability.Execute(targets);
			
			Assert.AreEqual(19, ability.CurrentUses);
		}
		
		[Test]
		[ExpectedException(typeof(Exception))]
		public void ExceptionOnZeroUses()
		{
			Character c = new Character(70);
			
			Ability ability = new Ability("Test Ability", "Normal", 20, 0, c);
			
			Character[] targets = new Character[] {};
			
			ability.Execute(targets);
		}
	}
}

